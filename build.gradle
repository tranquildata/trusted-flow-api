/*
 * Copyright (c) 2022-2024 Tranquil Data, Inc. All rights reserved.
 */

// This build file supports definition validation and html generation of the API
// docs. The supporting tool is designed to work on a single OpenAPI definition file,
// so each task is defined (for now) to work over the .yml files in the root of this
// repository. This pattern is expected to change as the various documentaiton
// repositories evolve and/or these definitions get merged into a common resource, so
// for now this simple approach is kept until it's clear how/if this needs to evolve.  
//
// Note that the "org.openapitools.generator" provides support for a great number
// client, server, and documentation generators. To see the full list, run:
//
//    $ gradlew openApiGenerators
//
// Documentation & source code for the gradle plugin is here:
//
//    https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin
//
// Documentation for the underlying project and all generators is here:
//
//    https://openapi-generator.tech/

plugins {
    //id "org.openapi.generator" version "6.2.0"
    id "org.openapi.generator" version "6.1.0"
}

// the expected extension for OpenAPI definition files
def definitionExtension = ".yml"

// the set of file names with the definition extension
def definitionNames = fileTree("${projectDir}") {
    include "**/*${definitionExtension}"
}

// validate all definition files, outputting any "recommendations" about how any
// given definition should be improved (akin to a lint task)
task validateApiDefinitions() {
    definitionNames.each { definitionName ->
        // get the relative name of each file, minus the extension
        def name = file("${definitionName}").getName().replace("${definitionExtension}", "")

        // register a task, including the name of the definition, and dependency
        def validateTask = tasks.register("${name}ApiValidate", org.openapitools.generator.gradle.plugin.tasks.ValidateTask) {
            inputSpec = "${definitionName}"
            recommend = true
        }
        dependsOn validateTask
    }
}

// generate all definition files as stand-alone html files
task generateApiDefinitions() {
    definitionNames.each { definitionName ->
        // get the relative name of each file, minus the extension
        def name = file("${definitionName}").getName().replace("${definitionExtension}", "")

        // register a task, including the name of the definition, and dependency
        def generateTask = tasks.register("${name}ApiGenerate", org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
            // NOTE: our initial target format to distribute externally is html, but this can
            // be changed locally to generate any number of other formats (or programming languages)
            generatorName = 'html2'
            inputSpec = "${definitionName}"
            // the generator doesn't let you name an output file, since some formats could result in multiple
            // files, so instead each definition gets its own directory and the assumption is that any
            // consumer will cherry-pick the files that it needs
            outputDir = "${buildDir}/${name}"
            // NOTE: we could set this to true and instead have a dependency on validateApiDefinitions()
            // but then we wouldn't be able to generate docs for testing when making changes where some
            // definitions aren't currently valid, so instead we'll do the validation test per-generation
            skipValidateSpec = false
        }
        dependsOn generateTask
    }
}

